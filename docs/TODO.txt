- Fix bug: If there's a failed ws connection, no error is passed to the
  application. E.g. connecting to an unknown server.
- Create a Server/Connection/Address type.
- Create function to put a game ID into a public URL:
  withFragment : GameId -> Url
- Create an opaque ClientId type, with toClientId and fromClientId functions.
- Noughts and crosses demo.
- Have client-side client ID stored in local storage.
- Quiz demo with a quiz host and password.
- Generate a game ID demo.
- Generate a game ID, but check it with the server first.
- Store game state locally.

DONE:

- Give clients an identifier (probably via a cookie).
- Refactor cookie client ID code into a Client type.
- Prove websockets connectivity.
- Generate client ID for websocket connection.
- Test that a real websocket client does send cookies as expected.
- Fixed: Bug: Client ID cookie is lost after browser closes (but not after tab
  closes). Likely due to Max-Age not being set (value in seconds).
- Make adding a client to a hub concurrency-safe.
- Allow removing of clients from a hub (concurrency-safely).
- Shift echoing into the client.
- Add a client to a hub when it's created.
- Have a client message bounce to other clients in a hub.
- Remove a client from hub when it leaves.
- Does pings and pongs.
- Close a client connection if ping doesn't get a response in time.
- Set write deadlines. (Read deadlines are for pongs only.)
- Send a marshalled JSON message, and handle a marshalling error.
- Add "other clients" list into server response; a "From" field.
- Add own client ID into server response; a "To" field.
- Add server time into server response; a "Time" field.
- Describe message sending in README.
- Send a server message when you join (intent "Welcome").
- Update README to talk about Welcome message.
- Send a server message when a client joins (intent "Joiner").
- Make sure "From" is a list.
- Set the welcome "From" field to all other clients, so the new
  client knows all the peers.
- Duplicate clients IDs will shown in the From and To fields.
- Rename echoHandler to bounceHander.
- The connection closes if a client sends a message over 60 kilobytes.
- Put clients into a hub per group/game.
- Hub to remove itself from superhub when it has no clients.
- Explore wait groups to check the superhub really does empty
  when it should.
- Send a server message when a client leaves (intent "Leaver").
- Server to detect which game a client wants.
- Server to reject a client request with no game/group specified.
- Allow a maximum number of clients in one game.
- Ensure a client which doesn't read doesn't block other comms.
- Investigate why we can't seem to send lots of 50k messages. (We can -
  we just need to make sure we don't time anything out too early.)
- Have Javascript client unpack server response with envelope+contents.
- Show Javascript errors in console. (These are handled by the browser.)
- Complete Javascript "structured data" demo.
- Put Javascript functions into their own script file.
- Add a server command to delete cookies.
- Have demo app choose its game ID.
- Create an Elm version of the Javascript "simple data" demo.
- Re-organise the files.
- Put some Elm logic into a package.
- Have the server allow a quick reconnection from the client.
- Buffer: get rid of unsentSet, replace with -ve unsent
- A reconnection with a lastnum that doesn't exist will get rejected.
- A new client with a bad lastnum should get a closed connection.
- Fix bug where hub has one client, and shuts down before the receiveExt
  has sent its last message.
- Have the server send a receipt, so a client knows the order in which
  their message was sent.
- Envelope time is in milliseconds.
- Tidy up the message structs between clients and hub.
- Get rid LostConnection branches from client.sendExt.
- Have the JavaScript library attempt a reconnection on unexpected disconnect.
- Switch client id creation to the client, coming via a query string.
- Update documentation to include behind-the-scenes connectivity.
- Ensure App Engine runs with only one instance.
- Trying to connect with a bad lastnum or over the max clients limit
  gets rejected before a websocket upgrade.
- JavaScript framework to keep trying to reconnect, and send a
  "connecting" envelope.
- Pass Javascript errors into envelope for Elm app.
- Join-in-the-lobby demo - collect names and enter.
- Created opaque GameId type. (For lobby demo only.)
- Finish off using GameId in demos.
- Client library - look at it providing the client ID to Elm on
  initialisation. Then simplify lobby demo.
